// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Metadata.Internal;
using Microsoft.EntityFrameworkCore.Migrations;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#pragma warning disable 219, 612, 618
#nullable disable

namespace Vidly.Application.Data.EntityModel
{
    public partial class DatabaseContextModel
    {
        partial void Initialize()
        {
            var customer = CustomerEntityType.Create(this);
            var genre = GenreEntityType.Create(this);
            var movie = MovieEntityType.Create(this);
            var rental = RentalEntityType.Create(this);
            var user = UserEntityType.Create(this);

            MovieEntityType.CreateForeignKey1(movie, genre);
            RentalEntityType.CreateForeignKey1(rental, customer);
            RentalEntityType.CreateForeignKey2(rental, movie);

            CustomerEntityType.CreateAnnotations(customer);
            GenreEntityType.CreateAnnotations(genre);
            MovieEntityType.CreateAnnotations(movie);
            RentalEntityType.CreateAnnotations(rental);
            UserEntityType.CreateAnnotations(user);

            AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);
            AddAnnotation("ProductVersion", "8.0.8");
            AddAnnotation("Relational:MaxIdentifierLength", 63);
            AddRuntimeAnnotation("Relational:RelationalModel", CreateRelationalModel());
        }

        private IRelationalModel CreateRelationalModel()
        {
            var relationalModel = new RelationalModel(this);

            var customer = FindEntityType("Vidly.Application.Models.Customer")!;

            var defaultTableMappings = new List<TableMappingBase<ColumnMappingBase>>();
            customer.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings);
            var vidlyApplicationModelsCustomerTableBase = new TableBase("Vidly.Application.Models.Customer", null, relationalModel);
            var idColumnBase = new ColumnBase<ColumnMappingBase>("Id", "integer", vidlyApplicationModelsCustomerTableBase);
            vidlyApplicationModelsCustomerTableBase.Columns.Add("Id", idColumnBase);
            var isGoldColumnBase = new ColumnBase<ColumnMappingBase>("IsGold", "boolean", vidlyApplicationModelsCustomerTableBase);
            vidlyApplicationModelsCustomerTableBase.Columns.Add("IsGold", isGoldColumnBase);
            var nameColumnBase = new ColumnBase<ColumnMappingBase>("Name", "character varying(50)", vidlyApplicationModelsCustomerTableBase);
            vidlyApplicationModelsCustomerTableBase.Columns.Add("Name", nameColumnBase);
            var phoneColumnBase = new ColumnBase<ColumnMappingBase>("Phone", "character varying(50)", vidlyApplicationModelsCustomerTableBase);
            vidlyApplicationModelsCustomerTableBase.Columns.Add("Phone", phoneColumnBase);
            relationalModel.DefaultTables.Add("Vidly.Application.Models.Customer", vidlyApplicationModelsCustomerTableBase);
            var vidlyApplicationModelsCustomerMappingBase = new TableMappingBase<ColumnMappingBase>(customer, vidlyApplicationModelsCustomerTableBase, true);
            vidlyApplicationModelsCustomerTableBase.AddTypeMapping(vidlyApplicationModelsCustomerMappingBase, false);
            defaultTableMappings.Add(vidlyApplicationModelsCustomerMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase, customer.FindProperty("Id")!, vidlyApplicationModelsCustomerMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)isGoldColumnBase, customer.FindProperty("IsGold")!, vidlyApplicationModelsCustomerMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nameColumnBase, customer.FindProperty("Name")!, vidlyApplicationModelsCustomerMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)phoneColumnBase, customer.FindProperty("Phone")!, vidlyApplicationModelsCustomerMappingBase);

            var tableMappings = new List<TableMapping>();
            customer.SetRuntimeAnnotation("Relational:TableMappings", tableMappings);
            var customersTable = new Table("Customers", null, relationalModel);
            var idColumn = new Column("Id", "integer", customersTable);
            customersTable.Columns.Add("Id", idColumn);
            idColumn.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);
            var isGoldColumn = new Column("IsGold", "boolean", customersTable);
            customersTable.Columns.Add("IsGold", isGoldColumn);
            var nameColumn = new Column("Name", "character varying(50)", customersTable);
            customersTable.Columns.Add("Name", nameColumn);
            var phoneColumn = new Column("Phone", "character varying(50)", customersTable);
            customersTable.Columns.Add("Phone", phoneColumn);
            var pK_Customers = new UniqueConstraint("PK_Customers", customersTable, new[] { idColumn });
            customersTable.PrimaryKey = pK_Customers;
            var pK_CustomersUc = RelationalModel.GetKey(this,
                "Vidly.Application.Models.Customer",
                new[] { "Id" });
            pK_Customers.MappedKeys.Add(pK_CustomersUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_CustomersUc).Add(pK_Customers);
            customersTable.UniqueConstraints.Add("PK_Customers", pK_Customers);
            relationalModel.Tables.Add(("Customers", null), customersTable);
            var customersTableMapping = new TableMapping(customer, customersTable, true);
            customersTable.AddTypeMapping(customersTableMapping, false);
            tableMappings.Add(customersTableMapping);
            RelationalModel.CreateColumnMapping(idColumn, customer.FindProperty("Id")!, customersTableMapping);
            RelationalModel.CreateColumnMapping(isGoldColumn, customer.FindProperty("IsGold")!, customersTableMapping);
            RelationalModel.CreateColumnMapping(nameColumn, customer.FindProperty("Name")!, customersTableMapping);
            RelationalModel.CreateColumnMapping(phoneColumn, customer.FindProperty("Phone")!, customersTableMapping);

            var genre = FindEntityType("Vidly.Application.Models.Genre")!;

            var defaultTableMappings0 = new List<TableMappingBase<ColumnMappingBase>>();
            genre.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings0);
            var vidlyApplicationModelsGenreTableBase = new TableBase("Vidly.Application.Models.Genre", null, relationalModel);
            var idColumnBase0 = new ColumnBase<ColumnMappingBase>("Id", "integer", vidlyApplicationModelsGenreTableBase);
            vidlyApplicationModelsGenreTableBase.Columns.Add("Id", idColumnBase0);
            var nameColumnBase0 = new ColumnBase<ColumnMappingBase>("Name", "character varying(50)", vidlyApplicationModelsGenreTableBase);
            vidlyApplicationModelsGenreTableBase.Columns.Add("Name", nameColumnBase0);
            relationalModel.DefaultTables.Add("Vidly.Application.Models.Genre", vidlyApplicationModelsGenreTableBase);
            var vidlyApplicationModelsGenreMappingBase = new TableMappingBase<ColumnMappingBase>(genre, vidlyApplicationModelsGenreTableBase, true);
            vidlyApplicationModelsGenreTableBase.AddTypeMapping(vidlyApplicationModelsGenreMappingBase, false);
            defaultTableMappings0.Add(vidlyApplicationModelsGenreMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase0, genre.FindProperty("Id")!, vidlyApplicationModelsGenreMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nameColumnBase0, genre.FindProperty("Name")!, vidlyApplicationModelsGenreMappingBase);

            var tableMappings0 = new List<TableMapping>();
            genre.SetRuntimeAnnotation("Relational:TableMappings", tableMappings0);
            var genresTable = new Table("Genres", null, relationalModel);
            var idColumn0 = new Column("Id", "integer", genresTable);
            genresTable.Columns.Add("Id", idColumn0);
            idColumn0.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);
            var nameColumn0 = new Column("Name", "character varying(50)", genresTable);
            genresTable.Columns.Add("Name", nameColumn0);
            var pK_Genres = new UniqueConstraint("PK_Genres", genresTable, new[] { idColumn0 });
            genresTable.PrimaryKey = pK_Genres;
            var pK_GenresUc = RelationalModel.GetKey(this,
                "Vidly.Application.Models.Genre",
                new[] { "Id" });
            pK_Genres.MappedKeys.Add(pK_GenresUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_GenresUc).Add(pK_Genres);
            genresTable.UniqueConstraints.Add("PK_Genres", pK_Genres);
            relationalModel.Tables.Add(("Genres", null), genresTable);
            var genresTableMapping = new TableMapping(genre, genresTable, true);
            genresTable.AddTypeMapping(genresTableMapping, false);
            tableMappings0.Add(genresTableMapping);
            RelationalModel.CreateColumnMapping(idColumn0, genre.FindProperty("Id")!, genresTableMapping);
            RelationalModel.CreateColumnMapping(nameColumn0, genre.FindProperty("Name")!, genresTableMapping);

            var movie = FindEntityType("Vidly.Application.Models.Movie")!;

            var defaultTableMappings1 = new List<TableMappingBase<ColumnMappingBase>>();
            movie.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings1);
            var vidlyApplicationModelsMovieTableBase = new TableBase("Vidly.Application.Models.Movie", null, relationalModel);
            var dailyRentalRateColumnBase = new ColumnBase<ColumnMappingBase>("DailyRentalRate", "integer", vidlyApplicationModelsMovieTableBase);
            vidlyApplicationModelsMovieTableBase.Columns.Add("DailyRentalRate", dailyRentalRateColumnBase);
            var genreIdColumnBase = new ColumnBase<ColumnMappingBase>("GenreId", "integer", vidlyApplicationModelsMovieTableBase);
            vidlyApplicationModelsMovieTableBase.Columns.Add("GenreId", genreIdColumnBase);
            var idColumnBase1 = new ColumnBase<ColumnMappingBase>("Id", "integer", vidlyApplicationModelsMovieTableBase);
            vidlyApplicationModelsMovieTableBase.Columns.Add("Id", idColumnBase1);
            var numberInStockColumnBase = new ColumnBase<ColumnMappingBase>("NumberInStock", "integer", vidlyApplicationModelsMovieTableBase);
            vidlyApplicationModelsMovieTableBase.Columns.Add("NumberInStock", numberInStockColumnBase);
            var titleColumnBase = new ColumnBase<ColumnMappingBase>("Title", "character varying(255)", vidlyApplicationModelsMovieTableBase);
            vidlyApplicationModelsMovieTableBase.Columns.Add("Title", titleColumnBase);
            relationalModel.DefaultTables.Add("Vidly.Application.Models.Movie", vidlyApplicationModelsMovieTableBase);
            var vidlyApplicationModelsMovieMappingBase = new TableMappingBase<ColumnMappingBase>(movie, vidlyApplicationModelsMovieTableBase, true);
            vidlyApplicationModelsMovieTableBase.AddTypeMapping(vidlyApplicationModelsMovieMappingBase, false);
            defaultTableMappings1.Add(vidlyApplicationModelsMovieMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase1, movie.FindProperty("Id")!, vidlyApplicationModelsMovieMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)dailyRentalRateColumnBase, movie.FindProperty("DailyRentalRate")!, vidlyApplicationModelsMovieMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)genreIdColumnBase, movie.FindProperty("GenreId")!, vidlyApplicationModelsMovieMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)numberInStockColumnBase, movie.FindProperty("NumberInStock")!, vidlyApplicationModelsMovieMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)titleColumnBase, movie.FindProperty("Title")!, vidlyApplicationModelsMovieMappingBase);

            var tableMappings1 = new List<TableMapping>();
            movie.SetRuntimeAnnotation("Relational:TableMappings", tableMappings1);
            var moviesTable = new Table("Movies", null, relationalModel);
            var idColumn1 = new Column("Id", "integer", moviesTable);
            moviesTable.Columns.Add("Id", idColumn1);
            idColumn1.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);
            var dailyRentalRateColumn = new Column("DailyRentalRate", "integer", moviesTable);
            moviesTable.Columns.Add("DailyRentalRate", dailyRentalRateColumn);
            var genreIdColumn = new Column("GenreId", "integer", moviesTable);
            moviesTable.Columns.Add("GenreId", genreIdColumn);
            var numberInStockColumn = new Column("NumberInStock", "integer", moviesTable);
            moviesTable.Columns.Add("NumberInStock", numberInStockColumn);
            var titleColumn = new Column("Title", "character varying(255)", moviesTable);
            moviesTable.Columns.Add("Title", titleColumn);
            var pK_Movies = new UniqueConstraint("PK_Movies", moviesTable, new[] { idColumn1 });
            moviesTable.PrimaryKey = pK_Movies;
            var pK_MoviesUc = RelationalModel.GetKey(this,
                "Vidly.Application.Models.Movie",
                new[] { "Id" });
            pK_Movies.MappedKeys.Add(pK_MoviesUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_MoviesUc).Add(pK_Movies);
            moviesTable.UniqueConstraints.Add("PK_Movies", pK_Movies);
            var iX_Movies_GenreId = new TableIndex(
            "IX_Movies_GenreId", moviesTable, new[] { genreIdColumn }, false);
            var iX_Movies_GenreIdIx = RelationalModel.GetIndex(this,
                "Vidly.Application.Models.Movie",
                new[] { "GenreId" });
            iX_Movies_GenreId.MappedIndexes.Add(iX_Movies_GenreIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_Movies_GenreIdIx).Add(iX_Movies_GenreId);
            moviesTable.Indexes.Add("IX_Movies_GenreId", iX_Movies_GenreId);
            relationalModel.Tables.Add(("Movies", null), moviesTable);
            var moviesTableMapping = new TableMapping(movie, moviesTable, true);
            moviesTable.AddTypeMapping(moviesTableMapping, false);
            tableMappings1.Add(moviesTableMapping);
            RelationalModel.CreateColumnMapping(idColumn1, movie.FindProperty("Id")!, moviesTableMapping);
            RelationalModel.CreateColumnMapping(dailyRentalRateColumn, movie.FindProperty("DailyRentalRate")!, moviesTableMapping);
            RelationalModel.CreateColumnMapping(genreIdColumn, movie.FindProperty("GenreId")!, moviesTableMapping);
            RelationalModel.CreateColumnMapping(numberInStockColumn, movie.FindProperty("NumberInStock")!, moviesTableMapping);
            RelationalModel.CreateColumnMapping(titleColumn, movie.FindProperty("Title")!, moviesTableMapping);

            var rental = FindEntityType("Vidly.Application.Models.Rental")!;

            var defaultTableMappings2 = new List<TableMappingBase<ColumnMappingBase>>();
            rental.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings2);
            var vidlyApplicationModelsRentalTableBase = new TableBase("Vidly.Application.Models.Rental", null, relationalModel);
            var customerIdColumnBase = new ColumnBase<ColumnMappingBase>("CustomerId", "integer", vidlyApplicationModelsRentalTableBase);
            vidlyApplicationModelsRentalTableBase.Columns.Add("CustomerId", customerIdColumnBase);
            var dateOutColumnBase = new ColumnBase<ColumnMappingBase>("DateOut", "timestamp with time zone", vidlyApplicationModelsRentalTableBase);
            vidlyApplicationModelsRentalTableBase.Columns.Add("DateOut", dateOutColumnBase);
            var dateReturnedColumnBase = new ColumnBase<ColumnMappingBase>("DateReturned", "timestamp with time zone", vidlyApplicationModelsRentalTableBase)
            {
                IsNullable = true
            };
            vidlyApplicationModelsRentalTableBase.Columns.Add("DateReturned", dateReturnedColumnBase);
            var idColumnBase2 = new ColumnBase<ColumnMappingBase>("Id", "integer", vidlyApplicationModelsRentalTableBase);
            vidlyApplicationModelsRentalTableBase.Columns.Add("Id", idColumnBase2);
            var movieIdColumnBase = new ColumnBase<ColumnMappingBase>("MovieId", "integer", vidlyApplicationModelsRentalTableBase);
            vidlyApplicationModelsRentalTableBase.Columns.Add("MovieId", movieIdColumnBase);
            var rentalFeeColumnBase = new ColumnBase<ColumnMappingBase>("RentalFee", "integer", vidlyApplicationModelsRentalTableBase);
            vidlyApplicationModelsRentalTableBase.Columns.Add("RentalFee", rentalFeeColumnBase);
            relationalModel.DefaultTables.Add("Vidly.Application.Models.Rental", vidlyApplicationModelsRentalTableBase);
            var vidlyApplicationModelsRentalMappingBase = new TableMappingBase<ColumnMappingBase>(rental, vidlyApplicationModelsRentalTableBase, true);
            vidlyApplicationModelsRentalTableBase.AddTypeMapping(vidlyApplicationModelsRentalMappingBase, false);
            defaultTableMappings2.Add(vidlyApplicationModelsRentalMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase2, rental.FindProperty("Id")!, vidlyApplicationModelsRentalMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)customerIdColumnBase, rental.FindProperty("CustomerId")!, vidlyApplicationModelsRentalMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)dateOutColumnBase, rental.FindProperty("DateOut")!, vidlyApplicationModelsRentalMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)dateReturnedColumnBase, rental.FindProperty("DateReturned")!, vidlyApplicationModelsRentalMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)movieIdColumnBase, rental.FindProperty("MovieId")!, vidlyApplicationModelsRentalMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)rentalFeeColumnBase, rental.FindProperty("RentalFee")!, vidlyApplicationModelsRentalMappingBase);

            var tableMappings2 = new List<TableMapping>();
            rental.SetRuntimeAnnotation("Relational:TableMappings", tableMappings2);
            var rentalsTable = new Table("Rentals", null, relationalModel);
            var idColumn2 = new Column("Id", "integer", rentalsTable);
            rentalsTable.Columns.Add("Id", idColumn2);
            idColumn2.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);
            var customerIdColumn = new Column("CustomerId", "integer", rentalsTable);
            rentalsTable.Columns.Add("CustomerId", customerIdColumn);
            var dateOutColumn = new Column("DateOut", "timestamp with time zone", rentalsTable);
            rentalsTable.Columns.Add("DateOut", dateOutColumn);
            var dateReturnedColumn = new Column("DateReturned", "timestamp with time zone", rentalsTable)
            {
                IsNullable = true
            };
            rentalsTable.Columns.Add("DateReturned", dateReturnedColumn);
            var movieIdColumn = new Column("MovieId", "integer", rentalsTable);
            rentalsTable.Columns.Add("MovieId", movieIdColumn);
            var rentalFeeColumn = new Column("RentalFee", "integer", rentalsTable);
            rentalsTable.Columns.Add("RentalFee", rentalFeeColumn);
            var pK_Rentals = new UniqueConstraint("PK_Rentals", rentalsTable, new[] { idColumn2 });
            rentalsTable.PrimaryKey = pK_Rentals;
            var pK_RentalsUc = RelationalModel.GetKey(this,
                "Vidly.Application.Models.Rental",
                new[] { "Id" });
            pK_Rentals.MappedKeys.Add(pK_RentalsUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_RentalsUc).Add(pK_Rentals);
            rentalsTable.UniqueConstraints.Add("PK_Rentals", pK_Rentals);
            var iX_Rentals_CustomerId = new TableIndex(
            "IX_Rentals_CustomerId", rentalsTable, new[] { customerIdColumn }, false);
            var iX_Rentals_CustomerIdIx = RelationalModel.GetIndex(this,
                "Vidly.Application.Models.Rental",
                new[] { "CustomerId" });
            iX_Rentals_CustomerId.MappedIndexes.Add(iX_Rentals_CustomerIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_Rentals_CustomerIdIx).Add(iX_Rentals_CustomerId);
            rentalsTable.Indexes.Add("IX_Rentals_CustomerId", iX_Rentals_CustomerId);
            var iX_Rentals_MovieId = new TableIndex(
            "IX_Rentals_MovieId", rentalsTable, new[] { movieIdColumn }, false);
            var iX_Rentals_MovieIdIx = RelationalModel.GetIndex(this,
                "Vidly.Application.Models.Rental",
                new[] { "MovieId" });
            iX_Rentals_MovieId.MappedIndexes.Add(iX_Rentals_MovieIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_Rentals_MovieIdIx).Add(iX_Rentals_MovieId);
            rentalsTable.Indexes.Add("IX_Rentals_MovieId", iX_Rentals_MovieId);
            relationalModel.Tables.Add(("Rentals", null), rentalsTable);
            var rentalsTableMapping = new TableMapping(rental, rentalsTable, true);
            rentalsTable.AddTypeMapping(rentalsTableMapping, false);
            tableMappings2.Add(rentalsTableMapping);
            RelationalModel.CreateColumnMapping(idColumn2, rental.FindProperty("Id")!, rentalsTableMapping);
            RelationalModel.CreateColumnMapping(customerIdColumn, rental.FindProperty("CustomerId")!, rentalsTableMapping);
            RelationalModel.CreateColumnMapping(dateOutColumn, rental.FindProperty("DateOut")!, rentalsTableMapping);
            RelationalModel.CreateColumnMapping(dateReturnedColumn, rental.FindProperty("DateReturned")!, rentalsTableMapping);
            RelationalModel.CreateColumnMapping(movieIdColumn, rental.FindProperty("MovieId")!, rentalsTableMapping);
            RelationalModel.CreateColumnMapping(rentalFeeColumn, rental.FindProperty("RentalFee")!, rentalsTableMapping);

            var user = FindEntityType("Vidly.Application.Models.User")!;

            var defaultTableMappings3 = new List<TableMappingBase<ColumnMappingBase>>();
            user.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings3);
            var vidlyApplicationModelsUserTableBase = new TableBase("Vidly.Application.Models.User", null, relationalModel);
            var emailColumnBase = new ColumnBase<ColumnMappingBase>("Email", "character varying(255)", vidlyApplicationModelsUserTableBase);
            vidlyApplicationModelsUserTableBase.Columns.Add("Email", emailColumnBase);
            var idColumnBase3 = new ColumnBase<ColumnMappingBase>("Id", "integer", vidlyApplicationModelsUserTableBase);
            vidlyApplicationModelsUserTableBase.Columns.Add("Id", idColumnBase3);
            var isAdminColumnBase = new ColumnBase<ColumnMappingBase>("IsAdmin", "boolean", vidlyApplicationModelsUserTableBase);
            vidlyApplicationModelsUserTableBase.Columns.Add("IsAdmin", isAdminColumnBase);
            var nameColumnBase1 = new ColumnBase<ColumnMappingBase>("Name", "character varying(50)", vidlyApplicationModelsUserTableBase);
            vidlyApplicationModelsUserTableBase.Columns.Add("Name", nameColumnBase1);
            var passwordColumnBase = new ColumnBase<ColumnMappingBase>("Password", "character varying(1024)", vidlyApplicationModelsUserTableBase);
            vidlyApplicationModelsUserTableBase.Columns.Add("Password", passwordColumnBase);
            relationalModel.DefaultTables.Add("Vidly.Application.Models.User", vidlyApplicationModelsUserTableBase);
            var vidlyApplicationModelsUserMappingBase = new TableMappingBase<ColumnMappingBase>(user, vidlyApplicationModelsUserTableBase, true);
            vidlyApplicationModelsUserTableBase.AddTypeMapping(vidlyApplicationModelsUserMappingBase, false);
            defaultTableMappings3.Add(vidlyApplicationModelsUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase3, user.FindProperty("Id")!, vidlyApplicationModelsUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)emailColumnBase, user.FindProperty("Email")!, vidlyApplicationModelsUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)isAdminColumnBase, user.FindProperty("IsAdmin")!, vidlyApplicationModelsUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nameColumnBase1, user.FindProperty("Name")!, vidlyApplicationModelsUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)passwordColumnBase, user.FindProperty("Password")!, vidlyApplicationModelsUserMappingBase);

            var tableMappings3 = new List<TableMapping>();
            user.SetRuntimeAnnotation("Relational:TableMappings", tableMappings3);
            var usersTable = new Table("Users", null, relationalModel);
            var idColumn3 = new Column("Id", "integer", usersTable);
            usersTable.Columns.Add("Id", idColumn3);
            idColumn3.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);
            var emailColumn = new Column("Email", "character varying(255)", usersTable);
            usersTable.Columns.Add("Email", emailColumn);
            var isAdminColumn = new Column("IsAdmin", "boolean", usersTable);
            usersTable.Columns.Add("IsAdmin", isAdminColumn);
            var nameColumn1 = new Column("Name", "character varying(50)", usersTable);
            usersTable.Columns.Add("Name", nameColumn1);
            var passwordColumn = new Column("Password", "character varying(1024)", usersTable);
            usersTable.Columns.Add("Password", passwordColumn);
            var pK_Users = new UniqueConstraint("PK_Users", usersTable, new[] { idColumn3 });
            usersTable.PrimaryKey = pK_Users;
            var pK_UsersUc = RelationalModel.GetKey(this,
                "Vidly.Application.Models.User",
                new[] { "Id" });
            pK_Users.MappedKeys.Add(pK_UsersUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_UsersUc).Add(pK_Users);
            usersTable.UniqueConstraints.Add("PK_Users", pK_Users);
            relationalModel.Tables.Add(("Users", null), usersTable);
            var usersTableMapping = new TableMapping(user, usersTable, true);
            usersTable.AddTypeMapping(usersTableMapping, false);
            tableMappings3.Add(usersTableMapping);
            RelationalModel.CreateColumnMapping(idColumn3, user.FindProperty("Id")!, usersTableMapping);
            RelationalModel.CreateColumnMapping(emailColumn, user.FindProperty("Email")!, usersTableMapping);
            RelationalModel.CreateColumnMapping(isAdminColumn, user.FindProperty("IsAdmin")!, usersTableMapping);
            RelationalModel.CreateColumnMapping(nameColumn1, user.FindProperty("Name")!, usersTableMapping);
            RelationalModel.CreateColumnMapping(passwordColumn, user.FindProperty("Password")!, usersTableMapping);
            var fK_Movies_Genres_GenreId = new ForeignKeyConstraint(
                "FK_Movies_Genres_GenreId", moviesTable, genresTable,
                new[] { genreIdColumn },
                genresTable.FindUniqueConstraint("PK_Genres")!, ReferentialAction.Cascade);
            var fK_Movies_Genres_GenreIdFk = RelationalModel.GetForeignKey(this,
                "Vidly.Application.Models.Movie",
                new[] { "GenreId" },
                "Vidly.Application.Models.Genre",
                new[] { "Id" });
            fK_Movies_Genres_GenreId.MappedForeignKeys.Add(fK_Movies_Genres_GenreIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_Movies_Genres_GenreIdFk).Add(fK_Movies_Genres_GenreId);
            moviesTable.ForeignKeyConstraints.Add(fK_Movies_Genres_GenreId);
            genresTable.ReferencingForeignKeyConstraints.Add(fK_Movies_Genres_GenreId);
            var fK_Rentals_Customers_CustomerId = new ForeignKeyConstraint(
                "FK_Rentals_Customers_CustomerId", rentalsTable, customersTable,
                new[] { customerIdColumn },
                customersTable.FindUniqueConstraint("PK_Customers")!, ReferentialAction.Cascade);
            var fK_Rentals_Customers_CustomerIdFk = RelationalModel.GetForeignKey(this,
                "Vidly.Application.Models.Rental",
                new[] { "CustomerId" },
                "Vidly.Application.Models.Customer",
                new[] { "Id" });
            fK_Rentals_Customers_CustomerId.MappedForeignKeys.Add(fK_Rentals_Customers_CustomerIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_Rentals_Customers_CustomerIdFk).Add(fK_Rentals_Customers_CustomerId);
            rentalsTable.ForeignKeyConstraints.Add(fK_Rentals_Customers_CustomerId);
            customersTable.ReferencingForeignKeyConstraints.Add(fK_Rentals_Customers_CustomerId);
            var fK_Rentals_Movies_MovieId = new ForeignKeyConstraint(
                "FK_Rentals_Movies_MovieId", rentalsTable, moviesTable,
                new[] { movieIdColumn },
                moviesTable.FindUniqueConstraint("PK_Movies")!, ReferentialAction.Cascade);
            var fK_Rentals_Movies_MovieIdFk = RelationalModel.GetForeignKey(this,
                "Vidly.Application.Models.Rental",
                new[] { "MovieId" },
                "Vidly.Application.Models.Movie",
                new[] { "Id" });
            fK_Rentals_Movies_MovieId.MappedForeignKeys.Add(fK_Rentals_Movies_MovieIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_Rentals_Movies_MovieIdFk).Add(fK_Rentals_Movies_MovieId);
            rentalsTable.ForeignKeyConstraints.Add(fK_Rentals_Movies_MovieId);
            moviesTable.ReferencingForeignKeyConstraints.Add(fK_Rentals_Movies_MovieId);
            return relationalModel.MakeReadOnly();
        }
    }
}
